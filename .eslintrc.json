{
  "env": {
    "browser": true,
    "commonjs": true,
    "es6": true,
    "node": true
  },
  "parser": "babel-eslint",
  "extends": ["airbnb", "prettier"],
  "plugins": ["babel", "import", "prettier", "react", "react-hooks", "sort-imports-es6-autofix"],
  "rules": {
    "prettier/prettier": ["error"],
    "max-len": ["error",
      {
        "code": 120,
        "ignoreComments": true,
        "ignoreTrailingComments": true,
        "ignoreUrls": true,
        "ignoreStrings": true,
        "ignoreTemplateLiterals": true,
        "ignoreRegExpLiterals": true
      }
    ],
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "error",
    "jsx-quotes": ["error", "prefer-double"],
    "func-call-spacing": ["error", "never"],
    "babel/semi": ["error", "never"],
    "semi": ["error", "never"],
    "quotes": ["error", "single", { "allowTemplateLiterals": true, "avoidEscape": true }],
    "no-multiple-empty-lines": ["error"],
    "lines-between-class-members": [
      "error", "always"
    ],
    "comma-dangle": [
      "error", "always-multiline"
    ],
    "new-parens": "error",
    "space-before-function-paren": "off",
    "space-in-parens": ["error", "never"],
    "key-spacing": ["error", { "beforeColon": false, "afterColon": true }],
    "sort-imports-es6-autofix/sort-imports-es6": [2, {
      "ignoreCase": false,
      "ignoreMemberSort": false,
      "memberSyntaxSortOrder": ["none", "all", "multiple", "single"]
    }],
    "padding-line-between-statements": [
      "error",
      { "blankLine": "always", "prev": "import", "next": "*" },
      { "blankLine": "never", "prev": "import", "next": "import" },
      { "blankLine": "always", "prev": "*", "next": "export" },
      { "blankLine": "any", "prev": "export", "next": "export" }
    ],
    "switch-colon-spacing": "error",
    "no-invalid-regexp": "error",
    "no-else-return": "error",
    "max-params": ["error", 5],
    "import/extensions": ["error", "always", { "ignorePackages": true }],
    "import/no-unresolved": "error",
    "import/named": "error",
    "import/default": "error",
    "import/no-dynamic-require": "off",
    "import/order": "off",
    "react/jsx-boolean-value": ["error", "always"],
    "react/jsx-curly-spacing": ["error", { "when": "never", "attributes": true, "children": false }],
    "react/jsx-equals-spacing": ["error", "never"],
    "react/jsx-indent-props": ["error", 4],
    "react/jsx-indent": ["error", 4],
    "react/jsx-key": "error",
    "react/jsx-no-bind": ["warn", { "allowArrowFunctions": true }],
    "react/jsx-no-comment-textnodes": "error",
    "react/jsx-no-duplicate-props": ["error", { "ignoreCase": true }],
    "react/jsx-no-literals": "off",
    "react/jsx-no-target-blank": "off",
    "react/jsx-curly-brace-presence": ["error", { "props": "never", "children": "never" }],
    "react/jsx-no-undef": ["error", { "allowGlobals": true }],
    "react/jsx-pascal-case": "error",
    "react/jsx-tag-spacing": ["error",
      {
        "closingSlash": "never",
        "beforeSelfClosing": "always",
        "afterOpening": "never"
      }
    ],
    "react/jsx-wrap-multilines": ["error",
      {
        "declaration": "parens-new-line",
        "assignment": "parens-new-line",
        "return": "parens-new-line",
        "arrow": "parens-new-line",
        "condition": "parens-new-line",
        "logical": "parens-new-line",
        "prop": false
      }
    ],
    "react/jsx-uses-vars": 2,
    "react/jsx-filename-extension": [1, { "extensions": [".js", ".jsx"] }],
    "react/jsx-props-no-spreading": "off",
    "react/display-name": [
      "error", { "ignoreTranspilerName": true }],
    "react/boolean-prop-naming": [
      "warn", { "rule": "^(is|has|can)[A-Z]([A-Za-z0-9]?)+" }],
    "react/default-props-match-prop-types": [
      "error", { "allowRequiredDefaults": false }],
    "react/forbid-component-props": [
      "error", { "forbid": [
        "style"
      ] }],
    "react/forbid-prop-types": [
      "warn", { "forbid": [
        "any", "array", "object"
      ] }],
    "react/no-array-index-key": "off",
    "react/no-children-prop": "error",
    "react/no-danger-with-children": "error",
    "react/no-deprecated": "error",
    "react/no-did-mount-set-state": "error",
    "react/no-did-update-set-state": "error",
    "react/no-direct-mutation-state": "error",
    "react/no-find-dom-node": "warn",
    "react/no-is-mounted": "error",
    "react/no-redundant-should-component-update": "error",
    "react/no-render-return-value": "error",
    "react/no-typos": "warn", // warn due to bug in rule
    "react/no-string-refs": "error",
    "react/no-unescaped-entities": "error",
    "react/no-unknown-property": "error",
    "react/no-unused-prop-types": "error",
    "react/no-unused-state": "warn",
    "react/prefer-es6-class": [
      "error", "always"
    ],
    "react/prefer-stateless-function": [
      "warn", { "ignorePureComponents": true }],
    "react/prop-types": "error",
    "react/no-will-update-set-state": "error",
    "react/require-render-return": "error",
    "react/style-prop-object": "error",
    "react/void-dom-elements-no-children": "error",
    "react/sort-comp": [
      "error",
      {
        "order": [
          "displayName",
          "propTypes",
          "defaultProps",
          "contextTypes",
          "childContextTypes",
          "mixins",
          "constructor",
          "state",
          "instance-variables",
          "statics",
          "static-methods",
          "getChildContext",
          "getDerivedStateFromProps",
          "componentWillMount",
          "UNSAFE_componentWillMount",
          "componentDidMount",
          "componentWillReceiveProps",
          "UNSAFE_componentWillReceiveProps",
          "shouldComponentUpdate",
          "componentWillUpdate",
          "UNSAFE_componentWillUpdate",
          "getSnapshotBeforeUpdate",
          "componentDidUpdate",
          "componentDidCatch",
          "componentWillUnmount",
          "componentUnload",
          "componentClose",
          "/^handle.+$/",
          "/^on.+$/",
          "everything-else",
          "/^render.+$/",
          "render"
        ]
      }
    ]
  },
  "globals": {
    "React": false,
    "PropTypes": false,
    "ReactDOM": false,
    "Axios":  false
  }
}